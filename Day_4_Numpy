Array
1)Central data structure of the NumPy Library
2)Array has a grid of elements that can be indexed in various ways
import numpy as np
#1D Array
x = np.arange(2,6).reshape(4)
print(x)

#2D Array ---2 Axes
y = np.arange(2,10).reshape(2,4)
print(y)

#3D Array --3 Axes
z = np.arange(24).reshape(4,3,2)
4 - represent matrix like structures
3 - represent no of rows
2 - represent no of columns

##Indexing and Selection

import numpy as np
arr = np.arange(20,30)
print(arr)
print(arr[5])
arr[9]
arr[:5]
arr[-1]
arr[1:7]
##Replacing Values
arr[1:7] = 100
print(arr)
#More Mathematical functions on NUMPY
np.copysign(-1.3,1)
---Copies sign of 1st Element to the second element
np.signbit(-1.3)
---Checks whether its a negative value
np.signbit(np.array[1,-2,-4,1])

np.fabs(-1)
---It finds the absolute value


##Basic and Advance Mathematics using NUMPY

  import numpy as np

  np.add(1,2)
  np.subtract(4,3)
  np.multiply(2,10)
  np.divide(10,2)

  ##Dividing the whole array by 2
  x = arange(10)
  print("Dividing the whole array by 2:")
  print(np.true_divide(x,2))

  ###Floor Divide gives the quotient and not the remainder part
  print(np.floor_divide(x,1.5))

  ###Element wise remainder of division
  print(np.remainder(x,2))

  ##Printing the Array
  new_array = np.array([2.5,3.4,0.5,-1.2,0.45])
  ##Rounding to the nearest integer
  np.rint(new_array)


  ###Finding the floor values
  np.floor(new_array)

  ##Finding the ceil values
  np.ceil(new_array)

  ###Finding the truncated values
  np.trunc(x)

x = np.array(0,-1,1)
print(np.sinh(x))

print("Inverse sine:",np.arcsin(x))




